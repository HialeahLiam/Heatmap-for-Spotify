---
import { SITE } from '~/config.mjs';
---

<script is:inline define:vars={{ defaultTheme: SITE.defaultTheme }}>
  function applyTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  if ((defaultTheme && defaultTheme.endsWith(':only')) || (!localStorage.theme && defaultTheme !== 'system')) {
    applyTheme(defaultTheme.replace(':only', ''));
  } else if (
    localStorage.theme === 'dark' ||
    (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
  ) {
    applyTheme('dark');
  } else {
    applyTheme('light');
  }

  function attachEvent(selector, event, fn) {
    const matches = typeof selector === 'string' ? document.querySelectorAll(selector) : selector;
    if (matches && matches.length) {
      matches.forEach((elem) => {
        elem.addEventListener(event, (e) => fn(e, elem), false);
      });
    }
  }

  window.onload = function () {
    let lastKnownScrollPosition = window.scrollY;
    let ticking = true;

    attachEvent('[data-aw-toggle-menu]', 'click', function (_, elem) {
      elem.classList.toggle('expanded');
      document.body.classList.toggle('overflow-hidden');
      document.getElementById('header')?.classList.toggle('h-screen');
      document.querySelector('#header nav')?.classList.toggle('hidden');
    });

    attachEvent('[data-aw-toggle-color-scheme]', 'click', function () {
      if (defaultTheme.endsWith(':only')) {
        return;
      }
      document.documentElement.classList.toggle('dark');
      localStorage.theme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    });

    attachEvent('[data-aw-social-share]', 'click', function (_, elem) {
      const network = elem.getAttribute('data-aw-social-share');
      const url = encodeURIComponent(elem.getAttribute('data-aw-url'));
      const text = encodeURIComponent(elem.getAttribute('data-aw-text'));

      let href;
      switch (network) {
        case 'facebook':
          href = `https://www.facebook.com/sharer.php?u=${url}`;
          break;
        case 'twitter':
          href = `https://twitter.com/intent/tweet?url=${url}&text=${text}`;
          break;
        case 'linkedin':
          href = `https://www.linkedin.com/shareArticle?mini=true&url=${url}&title=${text}`;
          break;
        case 'whatsapp':
          href = `https://wa.me/?text=${text}%20${url}`;
          break;
        case 'mail':
          href = `mailto:?subject=%22${text}%22&body=${text}%20${url}`;
          break;

        default:
          return;
      }

      const newlink = document.createElement('a');
      newlink.target = '_blank';
      newlink.href = href;
      newlink.click();
    });

    function appyHeaderStylesOnScroll() {
      const header = document.getElementById('header');
      if (lastKnownScrollPosition > 60 && !header.classList.contains('scroll')) {
        document.getElementById('header').classList.add('scroll');
      } else if (lastKnownScrollPosition <= 60 && header.classList.contains('scroll')) {
        document.getElementById('header').classList.remove('scroll');
      }
      ticking = false;
    }
    appyHeaderStylesOnScroll();

    attachEvent([document], 'scroll', function () {
      lastKnownScrollPosition = window.scrollY;

      if (!ticking) {
        window.requestAnimationFrame(() => {
          appyHeaderStylesOnScroll();
        });
        ticking = true;
      }
    });
  };

  window.onpageshow = function () {
    document.documentElement.classList.add('motion-safe:scroll-smooth');
    const elem = document.querySelector('[data-aw-toggle-menu]');
    if (elem) {
      elem.classList.remove('expanded');
    }
    document.body.classList.remove('overflow-hidden');
    document.getElementById('header')?.classList.remove('h-screen');
    document.querySelector('#header nav')?.classList.add('hidden');
  };

  // Define the behaviour for our new type of HTML element.
  class AstroHeart extends HTMLElement {
    constructor() {
      super();
      let count = 0;

      const heartButton = this.querySelector('button');
      const countSpan = this.querySelector('span');

      // Each time the button is clicked, update the count.
      heartButton.addEventListener('click', () => {
        count++;
        countSpan.textContent = count;
      });
    }
  }

  class FloatingText extends HTMLElement {
    TAILWIND_TRANSLATE = '-translate-x-80';
    TRANSLATION_DELAY = 50;

    vanish() {
      this.leftMovesFirst();

      const spanTags = document.querySelectorAll('.floating-span');
      for (let i = 0; i < spanTags.length; i++) {
        const classList = spanTags[i].classList;

        if (!classList.contains(this.TAILWIND_TRANSLATE)) classList.add(this.TAILWIND_TRANSLATE);
        if (!classList.contains('opacity-0')) classList.add('opacity-0');
      }
    }

    reappear() {
      this.rightMovesFirst();

      const spanTags = document.querySelectorAll('.floating-span');
      for (let i = 0; i < spanTags.length; i++) {
        spanTags[i].classList.remove(this.TAILWIND_TRANSLATE, 'opacity-0');
      }
    }

    leftMovesFirst() {
      const container = this.querySelector('div');
      const characterElements = container.children;

      let positionInTextLine = 0;
      let currentOffsetTop = 0;
      for (let j = 0; j < characterElements.length; j++) {
        const character = characterElements[j];

        if (currentOffsetTop < character.offsetTop) {
          currentOffsetTop = character.offsetTop;
          positionInTextLine = 0;
        }

        const delay = this.TRANSLATION_DELAY * positionInTextLine;
        character.style = `transition-delay: ${delay}ms`;

        positionInTextLine++;
      }
    }

    rightMovesFirst() {
      const container = this.querySelector('div');
      const characterElements = container.children;

      let n = characterElements.length;
      let positionInTextLine = 0;
      let currentOffsetTop = characterElements[n - 1].offsetTop;
      for (let j = 0; j < n; j++) {
        const character = characterElements[n - 1 - j];

        if (currentOffsetTop > character.offsetTop) {
          currentOffsetTop = character.offsetTop;
          positionInTextLine = 0;
        }

        const delay = this.TRANSLATION_DELAY * positionInTextLine;
        character.style = `transition-delay: ${delay}ms`;

        positionInTextLine++;
      }
    }

    constructor() {
      super();
      const container = document.createElement('div');

      this.className += ' whitespace-pre-wrap';
      const text = this.innerText;
      this.innerText = null;

      this.appendChild(container);
      container.className = 'text-7xl mb-4';

      container.append(
        ...text
          .trim()
          .split('')
          .map((s, i) => {
            // const delay = 50 * i;

            const span = document.createElement('span');
            span.className = ` floating-span w-fit inline-block whitespace-pre transition ease-in duration-300`;
            // span.style = `transition-delay: ${delay}ms`;
            span.innerText = s;

            return span;
          })
      );
    }
  }

  class PianoHeatMap extends HTMLElement {
    WHITE_KEY_WIDTH = '4';
    BLACK_KEY_WIDTH = '3';
    WHITE_KEY_HEIGHT = '18';
    BLACK_KEY_HEIGHT = '13';

    classMap = {
      0: ['shadow-red'],
      100: ['shadow-red-100'],
      200: ['shadow-red-200'],
      300: ['shadow-red-300'],
      400: ['shadow-red-400'],
      500: ['shadow-red-500'],
      600: ['shadow-red-600'],
      700: ['shadow-red-700'],
      800: ['shadow-red-800'],
      900: ['shadow-red-900'],
    }

    pitchMap = [
      {
        id: "C",
        class: this.classMap[0]
      },
      {
        id: "C#",
        class: this.classMap[0]
      },
      {
        id: "D",
        class: this.classMap[0]
      },
      {
        id: "D#",
        class: this.classMap[0]
      },
      {
        id: "E",
        class: this.classMap[0]
      },
      {
        id: "F",
        class: this.classMap[0]
      },
      {
        id: "F#",
        class: this.classMap[0]
      },
      {
        id: "G",
        class: this.classMap[0]
      },
      {
        id: "G#",
        class: this.classMap[0]
      },
      {
        id: "A",
        class: this.classMap[0]
      },
      {
        id: "A#",
        class: this.classMap[0]
      },
      {
        id: "B",
        class: this.classMap[0]
      },
    ]

    updatePitches(pitches) {

      pitches.forEach((p, i) => {
        let rounded = Math.floor((p * 10)) * 100
        if (rounded === 1000) rounded = 900

        const key = document.getElementById(this.pitchMap[i].id)
        key.classList.remove(this.pitchMap[i].class)
        this.pitchMap[i].class = this.classMap[rounded]
        key.classList.add(this.pitchMap[i].class)
      })
    }

    constructor() {
      super();

      const containerElement = document.createElement('div');
      this.appendChild(containerElement);
      containerElement.className = 'flex relative  max-w-fit mx-auto';

      const whiteKeyIds = ['C', 'D', 'E', 'F', 'G', 'A', 'B'];
      const blackKeyIds = ['C#', 'D#', null, 'F#', 'G#', 'A#'];

      const whiteKeyElements = whiteKeyIds.map((id) => {
        const containerKey = document.createElement('div');
        containerKey.className = `relative bg-gray-700 border-x border-b border-white rounded-b-xl shadow-[inset_0px_0px_50px_10px]`;
        containerKey.style = `width: ${this.WHITE_KEY_WIDTH}rem; height: ${this.WHITE_KEY_HEIGHT}rem`;
        containerKey.id = id

        // const key = document.createElement('div');
        // key.className = 'absolute bg-red-200 inset-0 rounded-b-xl';
        // containerKey.appendChild(key);
        return containerKey;
      });

      const blackKeyElements = blackKeyIds.map((id, i) => {
        const key = document.createElement('div');
        if (id) {
          key.className =
            'absolute bg-gray-800 z-10 border-b-2 border-x-2  rounded-b-xl shadow-[inset_0px_0px_50px_0px] shadow-red';

          key.style = `width: ${this.BLACK_KEY_WIDTH}rem; height: ${this.BLACK_KEY_HEIGHT}rem; left: ${
            this.WHITE_KEY_WIDTH * (i + 1) - this.BLACK_KEY_WIDTH / 2
          }rem`;

          key.id = id
        }
        return key;
      });

      containerElement.append(...whiteKeyElements);
      containerElement.append(...blackKeyElements);
      this.updatePitches([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    }
  }

  // Tell the browser to use our AstroHeart class for <astro-heart> elements.
  customElements.define('floating-text', FloatingText);
  customElements.define('piano-heatmap', PianoHeatMap);
</script>
